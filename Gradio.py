{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1VV2ZY6I3oIM5tmN7x1uGJPzxv1G8L6Rs","authorship_tag":"ABX9TyNAjNW/SOYgWd5GSQEbQBsW"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":668},"id":"oQb7fUN9xpt8","executionInfo":{"status":"ok","timestamp":1757251561024,"user_tz":-330,"elapsed":2047,"user":{"displayName":"Tyagesh Parmar","userId":"14113820636470654681"}},"outputId":"74989071-ee61-4220-e12e-dc4dc4972c56"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:absl:Compiled the loaded model, but the compiled metrics have yet to be built. `model.compile_metrics` will be empty until you train or evaluate the model.\n"]},{"output_type":"stream","name":"stdout","text":["It looks like you are running Gradio on a hosted Jupyter notebook, which requires `share=True`. Automatically setting `share=True` (you can turn this off by setting `share=False` in `launch()` explicitly).\n","\n","Colab notebook detected. To show errors in colab notebook, set debug=True in launch()\n","* Running on public URL: https://004900566325ff7211.gradio.live\n","\n","This share link expires in 1 week. For free permanent hosting and GPU upgrades, run `gradio deploy` from the terminal in the working directory to deploy to Hugging Face Spaces (https://huggingface.co/spaces)\n"]},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["<div><iframe src=\"https://004900566325ff7211.gradio.live\" width=\"100%\" height=\"500\" allow=\"autoplay; camera; microphone; clipboard-read; clipboard-write;\" frameborder=\"0\" allowfullscreen></iframe></div>"]},"metadata":{}},{"output_type":"execute_result","data":{"text/plain":[]},"metadata":{},"execution_count":6}],"source":["import gradio as gr\n","import tensorflow as tf\n","import numpy as np\n","from PIL import Image\n","\n","# Load trained model (adjust path if needed)\n","model = tf.keras.models.load_model(\"/content/drive/MyDrive/Colab Notebooks/Sign Language Gesture Images Dataset/sign_language_model.h5\")\n","\n","# Define the same labels used in training (must be in the correct order)\n","sign_labels_dict = {\n","    '0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9,\n","    'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15, 'G': 16, 'H': 17, 'I': 18,\n","    'J': 19, 'K': 20, 'L': 21, 'M': 22, 'N': 23, 'O': 24, 'P': 25, 'Q': 26, 'R': 27,\n","    'S': 28, 'T': 29, 'U': 30, 'V': 31, 'W': 32, 'X': 33, 'Y': 34, 'Z': 35, '_': 36\n","}\n","# Create reverse mapping: index â†’ label\n","labels = [k for k, v in sorted(sign_labels_dict.items(), key=lambda item: item[1])]\n","\n","# Define prediction function\n","def predict(image):\n","    # Step 1: Resize to match model input\n","    image = image.resize((224, 224))  # Your model input size\n","\n","    # Step 2: Convert to numpy array and normalize\n","    img_array = np.array(image) / 255.0  # Shape: (224, 224, 3)\n","\n","    # Step 3: Ensure correct shape for prediction\n","    img_array = np.expand_dims(img_array, axis=0)  # Shape: (1, 224, 224, 3)\n","\n","    # Step 4: Run prediction\n","    predictions = model.predict(img_array)[0]  # Get output of shape (num_classes,)\n","\n","    # Step 5: Get predicted label\n","    predicted_index = np.argmax(predictions)\n","    predicted_label = labels[predicted_index]\n","\n","    return predicted_label\n","\n","# Build Gradio interface\n","gr.Interface(\n","    fn=predict,\n","    inputs=gr.Image(type=\"pil\"),     # Accepts PIL image\n","    outputs=gr.Label(num_top_classes=3),  # Top 3 predictions\n","    title=\"Sign Language Recognizer\"\n",").launch()\n"]}]}